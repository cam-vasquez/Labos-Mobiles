## TODO LABO 08  

### 1. ¿Qué es una coroutine en Kotlin y cómo se diferencia de un hilo tradicional?  
  
Las coroutines son un mecanismo de programación que permite escribir código asíncrono de manera secuencial y estructurada en Kotlin. A diferencia de los hilos tradicionales, las coroutines son concurrencia cooperativa, lo que significa que el programador tiene el control para decidir cuándo se suspende y reanuda.  

### 2. ¿Cuál es la importancia de la suspensión en las coroutines y cómo se implementa?  
  
Nos ayuda a suspender momentáneamente la ejecución de una coroutine sin obstruir el main thread, es decir que es posible desarrollar código asíncrono y no bloqueante que pueda manejar  actividades largas o bloqueantes sin interferir con el hilo principal de la interfaz de usuario o hacer que la aplicación sea inutilizable.

Cuando una coroutine es suspendida, su estado y contexto de ejecución se mantienen en memoria. Esto incluye los valores de las variables locales, la posición en el código donde se suspendió y cualquier otra información relevante. Cuando la coroutine es reanudada, todos estos datos se restauran y la ejecución continúa desde el punto en el que se detuvo, como si nunca se hubiera pausado.
  
  
### 3. ¿Cuál es el propósito del Dispatcher en las coroutines y cómo se elige uno adecuado para cada tarea?  
  
Su propósito es especificar en que hilo o hilos se ejecutara una coroutine. Se elige uno para una tarea de acuerdo a la importancia que esta tenga.
  
### 4. ¿Cuál es el propósito y el uso de la función async en las coroutines?
 
Se utiliza para lanzar coroutines de manera asíncrona, con esto se obtiene el resultado utilizando el objeto Deferred. El resultado se obtiene mediante la función await().   
Async es útil cuando se seben ejecutar tareas concurrentes y combinar los resultados.











